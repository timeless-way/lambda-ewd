@@grammar:: EWD

c_program = 
        c_super_combinator_list $
    ;

c_super_combinator_list = 
        ';'%{c_super_combinator}+
    ;
                                 
c_super_combinator = 
        c_lhs '=' c_expression
    ;

c_lhs =
        c_variable [ c_variable_list ]
    ;

c_expression =
        c_letrec_expression
    |   c_let_expression
    |   c_case_expression
    |   c_lambda_expression
    |   c_expr1
    ;

c_let_expression =
        'let' deflist:c_definition_list 'in' expr:c_expression
    ;

c_letrec_expression =
        'letrec' deflist:c_definition_list 'in' expr:c_expression
    ;

c_case_expression =
        'case' expr:c_expression 'of' alts:c_alternative_list
    ;

c_lambda_expression = 
        '\\' pars:c_variable_list '.' body:c_expression
    ;

c_expr1 =
        '|'%{ c_expr2 }*
    ;

c_expr2 =
        '&'%{ c_expr3 }
    ;

c_expr3 =
        (c_relop)%{ c_expr4 }
    ;

c_expr4 =
        '+'%{ c_expr5 }
    ;

c_expr5 =
        c_expr6 [ '-' c_expr6 ]
    ;

c_expr6 =
        '*'%{ c_expr7 }
    ;

c_expr7 =
        c_expr8 [ '/' c_expr8 ]
    ;

c_expr8 =
        { c_atomic_expression }+
    ;
    
c_atomic_expression = 
        c_variable
    |   c_number
    |   c_constructor
    |   c_parentheses
    ;

c_definition_list =
        ';'%{c_definition}+
    ;

c_definition =
        c_variable '=' c_expression
    ;

c_alternative_list =
        '[]'%{c_alternative}+
    ;

c_alternative =
        '<' tag:c_number '>' vars:c_variable_list '->' expr:c_expression
    ;

c_relop =
        '<' | '<=' | '==' | '~=' | '>=' | '>'
    ;

c_variable_list =
        { c_variable }*
    ;

c_constructor =
        'Pack' '{' tag:c_number ',' arity:c_number '}'
    ;

c_parentheses =
        '(' expr:c_expression ')'
    ;

c_variable =
        !/let\W|letrec\W|in\W|case\W|of\W|Pack\W/
        /[a-zA-Z]([a-zA-Z0-9_])*/
    ;

c_number =
        /[0-9]+/
    ;
